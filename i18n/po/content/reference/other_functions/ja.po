# Japanese translations for clojure-site-ja package
# Copyright (C) 2016 Japan Clojurians
# This file is distributed under the same license as the clojure-site-ja package.
# Automatically generated, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: clojure-site-ja 0.0.1\n"
"POT-Creation-Date: 2016-06-27 08:47+0900\n"
"PO-Revision-Date: 2016-06-27 08:47+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: en/content/reference/atoms.adoc:4 en/content/reference/sequences.adoc:4 en/content/reference/metadata.adoc:4
#: en/content/reference/evaluation.adoc:4 en/content/reference/transients.adoc:4 en/content/reference/macros.adoc:4
#: en/content/reference/documentation.adoc:4 en/content/reference/refs.adoc:4 en/content/reference/compilation.adoc:4
#: en/content/reference/other_functions.adoc:4 en/content/reference/other_libraries.adoc:4
#: en/content/reference/data_structures.adoc:4 en/content/reference/datatypes.adoc:4 en/content/reference/agents.adoc:4
#: en/content/reference/protocols.adoc:4 en/content/reference/reducers.adoc:4 en/content/reference/lisps.adoc:4
#: en/content/reference/lazy.adoc:4 en/content/reference/repl_and_main.adoc:4 en/content/reference/transducers.adoc:4
#: en/content/reference/namespaces.adoc:4 en/content/reference/libs.adoc:4 en/content/reference/multimethods.adoc:4
#: en/content/search.adoc:4 en/content/about/clojureclr.adoc:4 en/content/about/functional_programming.adoc:4
#: en/content/about/lisp.adoc:4 en/content/about/features.adoc:4 en/content/about/dynamic.adoc:4
#: en/content/about/concurrent_programming.adoc:4 en/content/about/spec.adoc:4 en/content/about/rationale.adoc:4
#: en/content/about/state.adoc:4 en/content/about/clojurescript.adoc:4 en/content/about/jvm_hosted.adoc:4
#: en/content/about/runtime_polymorphism.adoc:4 en/content/404.adoc:4 en/content/privacy.adoc:4
#: en/content/community/swag.adoc:4 en/content/community/downloads.adoc:4 en/content/community/license.adoc:4
#: en/content/community/downloads_older.adoc:4 en/content/community/libraries.adoc:4
msgid "Rich Hickey 2015-01-01"
msgstr "Rich Hickey 2015-01-01"

#. type: Plain text
#: en/content/reference/special_forms.adoc:15 en/content/reference/sequences.adoc:15
#: en/content/reference/metadata.adoc:15 en/content/reference/reader.adoc:13 en/content/reference/transients.adoc:16
#: en/content/reference/macros.adoc:15 en/content/reference/refs.adoc:15 en/content/reference/compilation.adoc:16
#: en/content/reference/other_functions.adoc:17 en/content/reference/other_libraries.adoc:16
#: en/content/reference/java_interop.adoc:15 en/content/reference/data_structures.adoc:16
#: en/content/reference/datatypes.adoc:16 en/content/reference/agents.adoc:16 en/content/reference/protocols.adoc:15
#: en/content/reference/reducers.adoc:15 en/content/reference/lazy.adoc:12 en/content/reference/repl_and_main.adoc:16
#: en/content/reference/transducers.adoc:15 en/content/reference/vars.adoc:16 en/content/reference/namespaces.adoc:15
#: en/content/reference/libs.adoc:16 en/content/reference/multimethods.adoc:15
#: en/content/about/functional_programming.adoc:15 en/content/about/dynamic.adoc:16 en/content/about/spec.adoc:16
#: en/content/about/rationale.adoc:13 en/content/about/state.adoc:16 en/content/guides/reader_conditionals.adoc:10
#: en/content/guides/spec.adoc:11 en/content/guides/destructuring.adoc:11 en/content/guides/faq.adoc:11
msgid "toc::[]"
msgstr "toc::[]"

#. type: Title ==
#: en/content/reference/refs.adoc:73 en/content/reference/other_functions.adoc:41
#: en/content/reference/other_functions.adoc:65 en/content/reference/data_structures.adoc:70
#: en/content/reference/data_structures.adoc:90 en/content/reference/data_structures.adoc:98
#: en/content/reference/data_structures.adoc:107 en/content/reference/data_structures.adoc:116
#: en/content/reference/data_structures.adoc:162 en/content/reference/data_structures.adoc:174
#: en/content/reference/data_structures.adoc:188 en/content/reference/data_structures.adoc:223
#: en/content/reference/agents.adoc:64 en/content/reference/repl_and_main.adoc:159 en/content/reference/vars.adoc:85
#: en/content/reference/namespaces.adoc:24 en/content/reference/libs.adoc:64
#, no-wrap
msgid "Related functions"
msgstr "関連する関数"

#. type: Title =
#: en/content/reference/other_functions.adoc:1
#, no-wrap
msgid "Other Useful Functions and Macros"
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:21
msgid ""
"Boolean and comparison functions: http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/=[=] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/==[==] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/identical?[identical?] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/"
"not=[not=] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/not[not] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/true?[true?] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/false?[false?] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/nil?[nil?] "
"Miscellaneous: http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/identity[identity] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/dotimes[dotimes] http://clojure.github.io/clojure/clojure.core-"
"api.html#clojure.core/time[time] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/assert[assert] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-open[with-open]"
msgstr ""

#. type: Title ==
#: en/content/reference/other_functions.adoc:23
#, no-wrap
msgid "Creating functions"
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:35
msgid ""
"|=== | Function | Example expression | Return value | | <<special_forms#fn#,fn>> | `(map (fn [x] (+ 2 x)) [1 2 3])` | "
"`(3 4 5)` | | pass:[#()] <<reader#,reader>> macro | `(map #(+ 2 %) [1 2 3])` | `(3 4 5)` | | http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/partial[partial] | `(map (partial + 2) [1 2 3])` | `(3 4 5)` | | http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/comp[comp] | `(map (comp - *) [2 4 6] [1 2 3])` | `(-2 "
"-8 -18)` | | http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/complement[complement] | `(map "
"(complement zero?) [3 2 1 0])` | `(true true true false)` | | http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/constantly[constantly] | `(map (constantly 9) [1 2 3])` | `(9 9 9)` | |==="
msgstr ""

#. type: Title ==
#: en/content/reference/other_functions.adoc:37
#, no-wrap
msgid "Printing"
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:40
msgid ""
"Several functions are provided to print objects to the output stream that is the current value of `pass:[*out*]`. The "
"-str versions bind `pass:[*out*]` to a StringWriter, print to that, and return the resulting string. http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/pr[pr] prints the object(s), separated by spaces if there is "
"more than one. http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prn[prn] does the same and follows "
"it with a http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/newline[newline]. http://clojure.github."
"io/clojure/clojure.core-api.html#clojure.core/print[print] and http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/println[println] call http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/pr[pr] "
"and http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/prn[prn] respectively, with `pass:[*print-"
"readably*]` (which defaults to true) bound to nil, which causes strings to print without surrounding quotes or any "
"escape character encoding, and characters to print without the leading '\\', or any escape character encoding. By "
"default, http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/pr[pr] and http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/prn[prn] print in a way that objects can be read by the reader, while "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/print[print] and http://clojure.github.io/clojure/"
"clojure.core-api.html#clojure.core/println[println] produce output for human consumption. When `pass:[*print-"
"readably*]` is non-nil, the printing of metadata is toggled by `pass:[*print-meta*]`, which defaults to nil."
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:46
msgid ""
"Print to `pass:[*out*]`: http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/pr[pr] http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/prn[prn] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/print[print] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/println[println] "
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/newline[newline] Print to string: http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/pr-str[pr-str] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/prn-str[prn-str] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/print-"
"str[print-str] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/println-str[println-str] http://"
"clojure.github.io/clojure/clojure.core-api.html#clojure.core/with-out-str[with-out-str]"
msgstr ""

#. type: Title ==
#: en/content/reference/other_functions.adoc:48
#, no-wrap
msgid "Regex Support"
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:51
msgid ""
"Regex patterns can be compiled at read-time via the `#\"pattern\"` reader macro, or at run time with http://clojure."
"github.io/clojure/clojure.core-api.html#clojure.core/re-pattern[re-pattern]. Both forms produce http://java.sun.com/"
"j2se/1.5.0/docs/api/java/util/regex/Pattern.html[java.util.regex.Pattern] objects."
msgstr ""

#. type: delimited block -
#: en/content/reference/other_functions.adoc:63
#, no-wrap
msgid ""
"user=> (re-seq #\"[0-9]+\" \"abs123def345ghi567\")\n"
"(\"123\" \"345\" \"567\")\n"
"user=> (re-find #\"([-+]?[0-9]+)/([0-9]+)\" \"22/7\")\n"
"[\"22/7\" \"22\" \"7\"]\n"
"user=> (let [[a b c] (re-matches #\"([-+]?[0-9]+)/([0-9]+)\" \"22/7\")]\n"
"         [a b c])\n"
"[\"22/7\" \"22\" \"7\"]\n"
"user=> (re-seq #\"(?i)[fq]..\" \"foo bar BAZ QUX quux\")\n"
"(\"foo\" \"QUX\" \"quu\")\n"
msgstr ""

#. type: Plain text
#: en/content/reference/other_functions.adoc:66
msgid ""
"http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/re-matcher[re-matcher] http://clojure.github.io/"
"clojure/clojure.core-api.html#clojure.core/re-find[re-find] http://clojure.github.io/clojure/clojure.core-api."
"html#clojure.core/re-matches[re-matches] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/re-"
"groups[re-groups] http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/re-seq[re-seq]"
msgstr ""
